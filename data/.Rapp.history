#random seven minute sampling#
#
#working directory here#
#Last edited on Jan 4, 2024 by A. R. Martinig #
#
#Delete previous information stored #
rm(list=ls(all=T))#
#
##set wd to the folder with all your csv's in it#
setwd("~/Documents/Files/Post-docs/UofC/Jonas (ECOL 530)/axy-assay-comparison/data")
#random seven minute sampling#
#
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on March 5, 2024 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
options(scipen=999, dplyr.width = Inf, tibble.print_min = 50, repos='http://cran.rstudio.com/') #scipen forces outputs to not be in scientific notation #dplyr.width will show all columns for head() function and tibble.print_min sets how many rows are printed and repos sets the cran mirror#
#
#load libraries#
pacman::p_load(#
				ggplot2, #
				ggstatsplot,#
               dplyr, #
               lubridate, #
               tidyverse,   #
               broom,  #
               FSA,      #
               glmmTMB,  #
               lme4,   #
               tidyr,      #
               DescTools,#
               scales,#
               ggpubr,#
               grid,#
               lattice,#
               sjPlot,#
               sjlabelled,#
               sjmisc,#
               cowplot, #
               broom.mixed,#
               ggforce, #
               gridGraphics,#
               ggeffects,#
               magrittr,#
               krsp#
)#
select<-dplyr::select#
filter<-dplyr::filter#
###############################
#  importing  data and formatting it  ##
###############################
#########################################
#raw behavioural assays#
#impossible values removed#
#########################################
#
#creating the assay datast we will be using here#
#
assays<-read.csv("raw assays.csv", header=T) %>%#
	group_by(sq_id) %>%#
	mutate(trialdate=ymd(trialdate)) %>%#
	arrange(trialdate) %>%#
	mutate(trialnumber=row_number())%>%#
	ungroup() %>%#
#converting the raw scores#
	mutate(#
	ageclass=ifelse(age==0, "J", #
			ifelse(age==1, "Y", #
			ifelse(age>1, "A",  ageclass))),#
		squirrel_id=sq_id,#
		age=as.numeric(age),#
		walk=(walk/450), #
		jump=(jump/450), #
		hole=(hole/450), #
		hang=(hang/450), #
		chew=(chew/450), #
		groom=(groom/450), #
		still=(still/450),#
		front=(front/300), #
		back=(back/300), #
		attack=(attack/300), #
		attacklatency=(attacklatency/300), #
		approachlatency=(approachlatency/300)) %>%#
	filter(!squirrel_id== 23686, #IT DOES NOT HAVE A SEX LISTED ANYWHERE!#
	!is.na(squirrel_id), !observer %in% c("SWK"), is.na(hang) |hang<=1, is.na(chew) |chew<=1, is.na(still) |still<=1, is.na(front) | front<=1, is.na(back) |back<=1, is.na(attack) |attack<=0.96, is.na(attacklatency) |attacklatency<=1, is.na(approachlatency) |approachlatency<=1) %>% #
	#attack is set to 0.96 because numerous squirrels have 288-294 attacks, which are impossible to get in 300 seconds #
	#only excludes 2 squirrels from our n=88 dataset, the first (10265) had 294 attacks and a jump rate that was an outlier AND had decimals (which is impossible for a count behaviour!) and the second (10342) had 288 attacks#
	#this leaves squirrels with <=252 attacks (which also should be investigated)#
	select(-c(sq_id, observer.software,  collar, Exclude_unless_video_reanalyzed, Exclude_reason, Proceed_with_caution, Proceed_with_caution_reason, Last_Edited, Comments, oft_duration, mis_duration, colours, midden, taglft, tagrt, front, back, attack, attacklatency, approachlatency)) %>%#
	droplevels()#
summary(assays)#
head(assays)#
#
(assays) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #822 individuals#
nrow(assays) #1184#
#########################################
#bare minimum needed for axy data subsets#
#########################################
#
birth<-read.csv ("fitness.csv") %>%#
	select(c(squirrel_id, sex, byear, dyear, litter_id)) %>%#
	mutate(sex=ifelse(squirrel_id %in% c(21128, 21348), "F",#
		ifelse(squirrel_id %in% c(19890, 23326, 23210), "M", as.character(sex)))) %>%#
	group_by(squirrel_id) %>%#
	filter(row_number()==1)#
#
summary(birth)#
head(birth)#
#
#########################################
#raw axy data before cleaning#
#########################################
#
#for now I am just using Emily's data as I am waiting for Matt to provide me complete records#
axy<-read.csv("allaxy_random_7minute_sample.csv", header=T) %>%#
	mutate(#
		axy_id=paste(id, date, tod, sep = "-"), #
		axy_date=ymd(date),#
		axy_yr=year(date),#
		axy_month=month(date)) %>%#
	filter(!is.na(id)) %>% #remove the rows with NA for squirrel_id#
  	group_by(id, date, datetime) %>%#
  	mutate(row_num = row_number()) %>%#
  	pivot_wider(names_from = All, values_from = row_num, values_fn = length, values_fill = 0) %>%#
  ungroup() %>%#
  select(squirrel_id= id, axy_date, axy_yr, axy_month, tod, feed=Feed, forage=Forage, nestmove=NestMove, nestnotmove=NestNotMove, notmoving=NotMoving, travel=Travel, axy_id)#
#
head(axy)#
summary(axy)#
#
axy %>% filter(squirrel_id== 23286 & axy_id=="23286-2019-08-22-day")#
(axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #241 individuals#
nrow(axy) #87990
#random seven minute sampling#
#
#axy data for the complete dataset#
#last edited March 5, 2024 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
#
#########################################
#complete axy dataset, n=241 inds#
#before merging with personality data#
#########################################
#
axy1<- dplyr::left_join(axy, birth, by=c("squirrel_id")) %>%#
	group_by(axy_id, squirrel_id) %>%#
  	mutate(#
  		axy_age = axy_yr-byear, #calc age#
  		axy_ageclass = ifelse(axy_age==1, "Y", #
  			ifelse(axy_age >1, "A",#
        	ifelse(axy_age < 1, "J", "")))) %>% #creating age class  #
     ungroup() %>%   	      	#
##group by squirrel id and axy id (treats each axy as behavior trial) #
	group_by(squirrel_id, axy_date) %>%#
    mutate(total_obs=14, #
         #get the totals for each behaviour#
         total_feeding=sum(feed),#
         total_foraging=sum(forage),#
         total_nestmoving=sum(nestmove),#
         total_nestnotmoving=sum(nestnotmove),#
         total_notmoving =sum(notmoving),#
         total_travel=sum(travel),#
         #calc the proportions#
         prop_feeding=(total_feeding/total_obs),#
         prop_foraging=(total_foraging/total_obs),#
         prop_nestmoving =(total_nestmoving/total_obs),#
         prop_nestnotmoving =(total_nestnotmoving/total_obs),#
         prop_notmoving =(total_notmoving/total_obs),#
         prop_travel=(total_travel/total_obs)) %>%#
	filter(row_number()==1) %>%  #selects first row!#
  ungroup() %>%#
  droplevels() %>%#
  select(-c(total_obs, total_feeding, total_foraging, total_nestmoving, total_nestnotmoving, total_notmoving, total_travel))#
#
summary(axy1) #
head(axy1)#
#
table(axy1$sex)#
#########################################
######  extracting summary stats  #######
#########################################
#
(axy1) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #241 individuals#
nrow(axy1) #6271#
#
#deployment dates needed to calculate the exact number of sessions#
(axy1) %>% as_tibble() %>% count(squirrel_id, axy_yr, axy_month) %>% nrow() #approximately 465 sessions #
#
#year range#
table(axy1$axy_yr)#
#
#sex stats#
stats3<-axy1%>%group_by(squirrel_id)%>%filter(row_number()==1)#
table(stats3$sex)#
#
#ageclass stats#
stats4<-axy1%>%group_by(squirrel_id, axy_ageclass)%>%filter(row_number()==1)#
table(stats4$axy_ageclass)#
table(stats4$axy_ageclass, stats4$sex) #
#
#ageclass stats#
stats5<-axy1%>%group_by(squirrel_id, axy_ageclass)#
table(stats5$axy_ageclass) #
#
#observers#
#obs<-axy1%>%group_by(axy_id)%>%filter(row_number()==1) %>% group_by(f_observer) %>% mutate(sum=n())#
#table(obs$f_observer)#
#summary(obs$sum)#
#
#trial number by age class stats#
ads<-axy1 %>% filter(axy_ageclass =="A") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
yrs<-axy1 %>% filter(axy_ageclass =="Y") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
juvs<-axy1 %>% filter(axy_ageclass =="J") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#note: trial number is not reliable for adults or yearlings BECAUSE the count starts with the first trial - which may be during earlier phases (like an adult with 5 trials, could have had 3 of them done as a juvenile) - to get around this, I calculated sums after subsetting#
#
nrow(ads)#
table(ads$sum, ads$sex)#
#
nrow(yrs)#
table(yrs$sum, yrs$sex)#
#
nrow(juvs)#
table(juvs$sum, juvs$sex)
#random seven minute sampling#
#
#PCA calculcations for axy behaviours #
#last updated March 5, 2024 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
axy data subsets.R#
#########################################
#complete axy dataset, n=241 inds#
#before merging with personality data#
#########################################
#
colnames(axy1)#
#
PCaxys1<-prcomp(axy1[c("prop_feeding", "prop_foraging", "prop_nestmoving", "prop_nestnotmoving", "prop_notmoving", "prop_travel")], center=TRUE, scale. =TRUE)#
summary(PCaxys1) #
PCaxys1#
##PC1: feeding, foraging, -nestnotmoving, travel#
##PC2: nestnotmoving, -notmoving#
##PC3: nestmoveing, notmoving#
#
#add PCs to dataset#
axy1$PC1<-prcomp(~prop_feeding + prop_foraging + prop_nestmoving + prop_nestnotmoving +  prop_notmoving + prop_travel, data= axy1, center=TRUE, scale =TRUE)$x[,1]#
axy1$PC2<-(-1)*prcomp(~prop_feeding + prop_foraging + prop_nestmoving + prop_nestnotmoving +  prop_notmoving + prop_travel, data= axy1, center=TRUE, scale =TRUE)$x[,2]
#random seven minute sampling#
#
#Connect to database - replace with your username below#
#last updated on Feb 13, 2024 by A. R. Martinig#
#
#APRIL's connection to database#
con <- krsp_connect (host = "krsp.cepb5cjvqban.us-east-2.rds.amazonaws.com",#
                  dbname ="krsp",#
             user="amartinig",#
           password = keyring::key_get("krsp")#
)
#random seven minute sampling#
#
#code to calculate local density#
#original code by E. R. Siracusa#
#last updated on March 5, 2024 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
axy data subsets.R#
PCA Generation Code - Assays.R#
#
distance <- 130 #establish your radius for collecting neighbourhood data#
neighbours.all <- data.frame() #create an empty data frame to store the iterations of your loop in#
#
#Bring in the census - depending on what data you're working with you may need the dbamidden file or the census file or both#
#
new.census = tbl(con, "census") %>%#
			collect() %>%	#
	mutate(date = ymd(census_date),#
			 year = year(date),#
			 month = month(date),#
			 locX = loc_to_numeric(as.character(locx)), #KRSP function to deal with this#
			 locY = loc_to_numeric(locy)) %>%#
	select(squirrel_id, grid=gr, date, reflo, locX, locY, year, month, sex, Ft=sq_fate)#
old.census <- tbl(con, "dbamidden") %>%#
	collect() %>%#
	mutate(date = ymd(date),#
			 year = year(date),#
			 month = month(date),#
			 locX = loc_to_numeric(locX),#
			 locY = loc_to_numeric(locY),#
			 sex=Sex) %>%#
	select(-c(id, obs, tagLft, tagRt, tagLftNum, tagRtNum, col, color_left, color_right, Sex, fate, mcon, act, ft, cones, nest, comments)) %>%#
	dplyr::rename(Ft=def) %>%#
	filter(Ft == "4")#
#
#Separate out primary middens by different years due to differences in the fates #
#
censuspre16 <- new.census %>%#
	filter(date < "2016-07-01",#
		Ft=="1"|Ft=="2"|Ft=="3"|Ft=="4"|Ft=="9"|Ft=="10"|Ft=="11"|Ft=="13")#
#
censusfall16 <- new.census %>%#
	filter(date >= "2016-07-01" & date < "2017-01-01",#
		Ft=="1"|Ft=="3"|Ft=="6"|Ft=="10")#
#
censuspost17 <- new.census %>%#
	filter(date >= "2017-01-01",#
		Ft=="1"|Ft=="2"|Ft=="15"|Ft=="16"|Ft=="18"|Ft=="20")#
#
#add missing census records#
#records retrieved from any source available, including a combination of trapping, behaviour observations, and trial csv records#
missed<-data.frame(#
	squirrel_id=c(11537, 21058, 11398, 6423, 10767, 8592, 20600, 21465, 22428, 21246, 22389, 23903, 21435, 22009, 23256, 22497, 22052, 21930, 21880, 22602, 11180, 6312, 7075, 6340, 8036, 10517, 6624, 8386, 8304, 10736, 8299, 11488, 11615, 10736, 13235, 11721, 20914, 22495, 21355, 20778, 21128, 21842, 21351, 23262, 21903, 20998, 23816, 21999, 21770, 22042, 22042, 20372, 21348, 20373, 23244, 23244, 23306, 23271, 23271, 24062, 23286, 23286, 20371, 21304, 23213, 23213, 23215, 23218, 23258, 23261, 23263, 23276, 23298, 23307, 23308, 23331, 23759, 23775),#
	grid=c("KL", "SU", "KL", "KL", "AG", "KL", "SU", "JO", "AG", "AG", "AG", "SU", "AG", "KL", "SU", "AG", "AG", "AG", "AG", "JO", "JO", "KL", "SU", "AG", "KL", "KL", "AG", "KL", "KL", "KL", "KL", "KL", "KL", "KL", "SU", "JO", "KL", "SU", "KL", "KL", "AG", "AG", "AG", "AG", "AG", "KL", "KL", "KL", "KL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL", "LL"),#
	date=c("2014-05-15", "2017-05-20", "2010-06-01", "2005-08-16", "2009-07-01", "2005-08-31", "2017-05-21", "2019-08-22", "2018-07-09", "2018-07-08", "2018-07-18", "2019-08-06", "2018-07-17", "2017-05-26", "2017-07-25", "2018-07-11", "2018-07-18", "2018-07-18", "2018-07-15", "2019-07-25", "2005-08-15", "2005-05-15", "2005-08-15", "2005-08-15", "2005-05-15", "2005-08-15", "2005-07-03", "2008-05-15", "2008-05-15", "2008-05-15", "2008-05-15", "2010-05-15", "2010-05-15", "2010-05-15", "2012-07-21", "2012-05-15", "2019-04-08", "2016-07-03", "2019-04-06", "2019-04-11", "2016-08-25", "2015-09-16", "2015-09-24", "2018-08-15", "2015-05-15", "2015-09-17", "2019-04-04", "2015-08-15", "2015-09-25", "2017-09-03", "2018-09-04", "2017-08-29", "2017-08-29", "2017-09-04", "2018-08-22", "2017-09-06", "2017-09-06", "2018-08-27", "2017-09-07", "2019-08-22", "2019-08-31", "2018-08-27", "2017-09-04", "2018-08-15", "2018-08-22", "2017-09-02", "2017-09-03", "2019-08-31", "2019-09-13", "2017-09-18", "2017-09-03", "2017-09-06", "2017-09-18", "2017-09-06", "2019-09-10", "2018-09-01", "2019-08-31", "2018-09-04"),#
	reflo=c("O.2.", "G4", "I.21", "J1", "D31", "-613", "-1.4.", "T.1", "K16", "N23", "D.22", "-8.17", "L.20.", "K.0.", "D2", "T2.", "F12", "E19", "R.19.", "U13", "M.6.", "B.10.", "T3", "T.13.", "J.9", "N.2.", "B.9.", "M14", "M20", "P14", "O15", "-414", "-6.12", "M.13", "D.2.", "M.4", "-610", "O8", "D7", "E3.", "I.21.", "Q11", "A18", "A0", "H.0", "D4", "J.9", "-59", "J.7.", "C.5", "C.5", "H0.", "B2", "L2", "G0.", "G0.", "-32", "M.6", "M.6", "-82.", "N3.", "S.3.", "M.6", "M.0.", "J.0.", "J.0.", "-91", "W4", "Q.5.", "H.4.", "-3.0", "-65.", "E.4", "-52.", "V0", "J2.", "E.1.", "H.4."),#
	locX=c(15.3, 7, 9.5, 10, 4, -6, -1.5, 20.5, 11, 14, 4.5, -8.5, 12.5, 11.5, 4, 20, 6, 5, 18.5, 21, 13.5, 2.6, 20.1, 20.9, 10, 14.4, 2.5, 13, 13, 16, 15, -4, -6.5, 13.5, 4.5, 13.5, -6, 14.8, 4.3, 5, 9.5, 17.8, 1, 1, 8.5, 4, 10.6, -5, 10.5, 3.5, 3.5, 8.5, 2.0, 12, 7, 7, -3, 13.5, 13.5, -8, 14, 19.5, 13.5, 13.5, 10.5, 10.5, -9, 23, 22.5, 8.5, -3.5, -6, 5.5, -5, 22, 10, 5.5, 8.5),#
	locY=c(2.5, 4, 21, 1, 31, 13, 4.5, 1.0, 16, 23, 22, 17, 20.5, 0.5, 2, 2.5, 12, 19, 19.5, 13, 6.7, 10.5, 3, 13.9, 9, 2.4, 9.5, 14, 20, 14, 15, 14, 12, 15, 2.5, 4, 10, 8.1, 7, 3.5, 21.5, 11.3, 18.2, 0.5, 0, 4, 9.2, 9, 7.5, 5, 5, 0.5, 2, 2, 0.5, 0.5, 2, 6, 6, 2.5, 3.5, 3.5, 6, 0.5, 0.5, 0.5, 1, 4, 5.5,  4.5, 0, 5.5, 4, 2.5, 0, 2.5, 1.5, 4.5),#
	Ft=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),#
	year=c(2014, 2017, 2010, 2005, 2009, 2005, 2017, 2019, 2018, 2018, 2018, 2019, 2018, 2017, 2017, 2018, 2018, 2018, 2018, 2019, 2005, 2005, 2005, 2005, 2008, 2009, 2005, 2008, 2008, 2008, 2008, 2010, 2010, 2010, 2012, 2012, 2019, 2016, 2019, 2019, 2016, 2015, 2015, 2018, 2015, 2015, 2019, 2015, 2015, 2017, 2018, 2017, 2017, 2017, 2018, 2017, 2017, 2018, 2017, 2019, 2019, 2018, 2017, 2018, 2018, 2017, 2017, 2019, 2019, 2017, 2017, 2017, 2017, 2017, 2019, 2018, 2019, 2018),#
	month=c(5, 5, 6, 8, 7, 8, 5, 8, 7, 7, 7, 8, 7, 5, 7, 7, 7, 7, 7, 7, 8, 5, 8, 8, 5, 8, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 7, 4, 4, 8, 9, 9, 8, 5, 9, 4, 8, 9, 9, 9, 8, 8, 9, 8, 9, 9, 8, 9, 8, 8, 8, 9, 8, 8, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9),#
	sex=c("F", "F", "M", "M", "M", "F", "F", "F", "M", "F", "M", "F", "M", "F", "F", "F", "M", "M", "F", "F", "M", "M", "M", "F", "M", "F", "F", "M", "M", "M", "M", "M", "M", "M", "M", "F", "M", "F", "M", "M", "F", "F", "F", "M", "F", "M", "M", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "M", "F", "F", "F", "F", "F", "F", "F", "M", "F", "F",  "F", "F", "F", "F", "F", "M", "F", "F"))#
#Bind these back together#
census <- rbind(old.census, censuspre16,censusfall16,censuspost17,missed) %>%#
	group_by(squirrel_id, year, month) %>% #need to include month here so that we capture both may and august census data#
	filter(row_number()==1) %>% #squirrels >1 primary midden only get counted once, second censuses not included#
	mutate(locX = loc_to_numeric(as.character(locX)),#
		   locY = loc_to_numeric(locY),#
	reflo=ifelse(squirrel_id==11031, "Q8", reflo)) %>%#
	mutate(locX=ifelse(squirrel_id==22996 & year==2017, 13.5, #
	ifelse(squirrel_id==20839 & year==2015, 17, #
	ifelse(squirrel_id==21496 & year==2015, -3, #
	ifelse(squirrel_id==11020 & year==2013, -5, #
	ifelse(squirrel_id==10746 & year==2009, 16,#
	ifelse(squirrel_id==10376 & year==2009, 12,#
	locX)))))), #
	locY=ifelse(squirrel_id==22996 & year==2017, 8, #
	ifelse(squirrel_id==20839 & year==2015, 9, #
	ifelse(squirrel_id==11020 & year==2013, 12, #
	ifelse(squirrel_id==21496 & year==2015, 2, #
	locY)))))  %>%#
	ungroup() #
#
#Create a census file with just may and august data to make it easier to match up with axy and assay data#
census_forcombining <- census %>%#
	filter(month==4 | month==5 | month==6 | month==7 | month==8 | month==9 | month==10) %>%#
	mutate(month = ifelse(month <= 6,  5, #
		ifelse(month >= 7, 8, month)))#
###################################################
##generate combined dataset for axys ------#
###################################################
#
min_info_axy<-axy1 %>% #
		ungroup() %>% #
		mutate(axy_month = month(axy_date)) %>%#
		group_by(squirrel_id, axy_yr) %>% #only need to keep 1 record per squirrel per assay year and axy year#
		filter(row_number()==1) %>%#
		ungroup()%>%#
		select(squirrel_id, axy_yr, axy_date, axy_month) #
(min_info_axy) %>% as_tibble() %>% dplyr::count(squirrel_id) %>% nrow() #250 inds#
min_info_axy %<>%#
#make sure all of the months are either May or August#
	mutate(axy_month = #
		ifelse(axy_month <= 6, 5, #
		ifelse(axy_month >= 7, 8, axy_month))) #%>%#
#fix some months so that they line up with the census data we have #
	#mutate(axy_month = #
	#ifelse(squirrel_id==10702 & axy_yr=="2008", 5,#
	#ifelse(squirrel_id==21496 & axy_yr=="2015", 5,#
	#ifelse(squirrel_id %in% c(13023, 20782, 12522, 21787, 19718) & axy_yr=="2016", 5, #
 	#ifelse(squirrel_id %in% c(22912, 22893, 22585, 21496, 19970, 23210, 22889) & axy_yr=="2018", 5,#
	#ifelse(squirrel_id %in% c(12958, 21533, 21496, 21496) & axy_yr == "2015", 8, #
	#axy_month))))))#
#
nrow(min_info_axy) #327#
axy_local_density <- left_join(min_info_axy, census_forcombining, by=c("squirrel_id"="squirrel_id", "axy_yr"="year", "axy_month"="month")) %>% #
	mutate(axy.local.density = as.numeric(0), #this creates a new column in which to store your calculated local density#
		date = as.character(date),#
		axy_month=month(axy_date),#
		census_month=month(date),#
		locX=#
			ifelse(squirrel_id==13412, -7.7,#
			ifelse(squirrel_id==11537, 15.3, locX)), #
		locY=#
			ifelse(squirrel_id==13412, 12.7, #
			ifelse(squirrel_id==11537, 2.5, locY))) %>%#
	mutate(date=ifelse(squirrel_id==11537, "2014-05-15", date)) %>%#
	mutate(date = ymd(date)) %>%#
	select(-c(sex)) %>%#
#squirrels with two spring OR two fall census records, keep only census record closest to august or may in the season (e.g., if there was a census in august and september, we kept the august record)	#
	filter(!(squirrel_id == 19257 & reflo == "E7"),#
		!(squirrel_id == 10355 & reflo == "Q6"), #
		!(squirrel_id == 12435 & reflo == "K12"))#
axy_local_density<-axy_local_density %>% mutate(axy_month = #
		ifelse(axy_month==3 & census_month==4, 4,#
		ifelse(axy_month<=6 & census_month==5, 5,#
		ifelse(axy_month>=7 & census_month==5, 5,#
		ifelse(axy_month<=6 & census_month==6, 6,#
		ifelse(axy_month>=7 & census_month==8, 8,#
		ifelse(axy_month>=7 & census_month==9, 9,#
		 	axy_month)))))))#
summary(axy_local_density)#
(axy_local_density) %>% as_tibble() %>% dplyr::count(squirrel_id) %>% nrow() #335 inds#
nrow(axy_local_density) #428#
###################################################
#density for the axys ------#
###################################################
#
n_f <- length(axy_local_density$squirrel_id) #This is the length of your data (i.e. the squirrels that you want to create neighbourhoods and calculate density for). You can substitute squirrel_id for any column. This is the data the code below will loop through.#
#
for (i in 1:n_f) {#
	print(i)#
	neighbours <- subset(census, #
	census$grid== axy_local_density$grid[i] & #
	census$year== axy_local_density$axy_yr[i] & #
	census$month== axy_local_density$axy_month[i] & #
	(30*axy_local_density$locX[i]-30*census$locX)^2+(30*axy_local_density$locY[i]-30*census$locY)^2<=(distance)^2) #
	#This selects neighbours in the same grid, year, month and within 130 m of your axy individual.#
#
	#this creates a column in your new 'neighbours' dataframe so that you can identify which axy individual you just created a neighbourhood for. #
	neighbours <- subset(neighbours, !neighbours$squirrel_id==axy_local_density$squirrel_id[i]) #
	#this makes sure your axy squirrel is not included in your neighbours.#
	#Calculate Density (squirrels per hectare: 53,092 m2 = 5.3 hectares)#
	num.indiv <-  length(unique(neighbours$squirrel_id))#
	density <- num.indiv/((pi*distance^2)/10000)#
	#Put it all together#
	axy_local_density[i,"axy.local.density"] <- density#
}#
#
#clean dataset with local density for axys#
clean_axy_d<-axy_local_density%>%select(c(squirrel_id, axy_yr, axy.local.density))#
summary(clean_axy_d)
#random seven minute sampling#
#
#code to calculate familiarity scores (axys dataset)#
#original code by E. R. Siracusa#
#last updated on Feb 13, 2024 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
axy data subsets.R#
local density.R#
#
axy.neighbours.all <- data.frame() #create an empty data frame to store the iterations of your loop in#
#
###################################################
##generate combined dataset for axys ------#
###################################################
#
axy_fam <- left_join(min_info_axy, census_forcombining, by=c("squirrel_id"="squirrel_id", "axy_yr"="year", "axy_month"="month")) %>% #
	select(-axy_month) %>% #axy_month had been set to either May or August for ease of matching it up with the census data#
	mutate(axy.local.density = as.numeric(0), #this creates a new column in which to store your calculated local density#
		date = as.character(date),#
		axy_month = month(axy_date), #use the actual month that the axy was conducted to calculate familiarity accurately#
        	census_month=month(date),#
        locX=ifelse(squirrel_id==13412, -7.7, locX),#
		locY=ifelse(squirrel_id==13412, 12.7, locY)) %>% #
	mutate(date = ymd(date),#
	axy_month = #
		ifelse(axy_month==3 & census_month==4, 4,#
		ifelse(axy_month<=6 & census_month==5, 5,#
		ifelse(axy_month==8 & census_month==5, 5,#
		ifelse(axy_month <=6 & census_month==6, 8, #must be August because there are no other census records that month and it breaks the loop if I leave it as June#
		ifelse(axy_month>=7 & census_month==8, 8,#
		ifelse(axy_month>=7 & census_month==9, 9,#
		 	axy_month))))))) %>%#
	select(-c(sex)) %>%#
#squirrels with two spring OR two fall census records, keep only census record closest to august or may in the season (e.g., if there was a census in august and september, we kept the august record)	#
	filter(!(squirrel_id == 19257 & reflo == "E7"),#
		!(squirrel_id == 10355 & reflo == "Q6"), #
		!(squirrel_id == 12435 & reflo == "K12")) #
#
summary(axy_fam)#
(axy_fam) %>% as_tibble() %>% dplyr::count(squirrel_id) %>% nrow() #335 inds#
nrow(axy_fam) #428#
############################
#familiarity for axys ------#
############################
#
n_f <- length(axy_fam$squirrel_id) #This is the length of your data (i.e. the squirrels that you want to create neighbourhoods and calculate density for). You can substitute squirrel_id for any column. This is the data the code below will loop through. #
#for axys#
for (j in 1:n_f) {#
	print(j)#
	#this selects neighbours in the same grid, year, month and within 130 m of your axy individual.#
	neighbours <- subset(census, #
		census$grid==axy_fam$grid[j] & #
		census$year==axy_fam$axy_yr[j] & #
		census$month==axy_fam$axy_month[j] & (30*axy_fam$locX[j]-30*census$locX)^2+(30*axy_fam$locY[j]-30*census$locY)^2<=(distance)^2)#
	#this makes sure your axy squirrel is not included in your neighbours.#
	neighbours <- subset(neighbours, !neighbours$squirrel_id==axy_fam$squirrel_id[j])#
	#Add an if/else clause to deal with squirrels that were off grid and therefore have 0 neighbours… as this causes the loop to fail. We are inputting NAs for the average familiarity for these individuals	#
	if(length(neighbours$squirrel_id > 0)){#
		#this creates new columns in your 'neighbours' dataframe so that you can identify which axy individual you just created a neighbourhood for and adds back some of the information about the axy individual#
		neighbours$axy.ID <- axy_fam$squirrel_id[j]#
		neighbours$axy.locX <- axy_fam$locX[j]#
		neighbours$axy.locY <- axy_fam$locY[j]#
		neighbours$axy.reflo <- axy_fam$reflo[j]#
		neighbours$axy.Date <- axy_fam$date[j]#
		#make sure neighbours aren't duplicated (i.e. because an individual has more than one primary midden) - this shouldn't happen because of how we subsetted the census data above #
		neighbours %<>% filter(!duplicated(squirrel_id))#
		#Calculate Distance			#
		n <- length(neighbours$axy.ID)#
		for(k in 1:n){#
			dis <- sqrt((30*(neighbours$axy.locX[k])-30*(neighbours$locX[k]))^2+(30*(neighbours$axy.locY[k])-30*(neighbours$locY[k]))^2)#
			neighbours[k,"Nbor.dis"] <- dis#
		}	#
		#this serves as a double check and helps catch any mistakes in the database where two squirrels were assigned the same primary midden				#
		neighbours %<>% filter(Nbor.dis > 0)#
		#Calculate Familiarity - here we are going to cycle through each neighbour and see how long the axy squirrel and neighbouring squirrel have occupied their current territories next to each other#
		n <- length(neighbours$axy.ID)#
		for(i in 1:n){#
			#this selects only census information that is on or before the date that you want to calculate familiarity from	#
			fam1 <- subset(census, census$date<=neighbours$axy.Date[i])#
			#select all instances where the axy squirrel lived at this reflo#
			fam2 <- subset(fam1, fam1$squirrel_id==neighbours$axy.ID[i] & fam1$reflo==neighbours$axy.reflo[i])#
			#because we have juveniles for whom we are using mom's midden as their "home" there will be instances where the axy squirrel is not found in the census before the date of interest. This will cause a -Inf in the data. These should be zeros in the data#
			if(nrow(fam2)==0){#
				own <- neighbours$axy.Date[i]#
			} else {#
				#select the earliest date that that the axy squirrel lived at this reflo#
				own <- min(fam2$date)#
			}#
			#select all instances where the neighbouring squirrel lived at this reflo#
			fam3 <- subset(fam1, fam1$squirrel_id==neighbours$squirrel_id[i] & fam1$reflo==neighbours$reflo[i])#
			#if the neighbour was censused after the axy squirrel sometimes the neighbour was only present at the current midden after the date of interest. In this case the neighbour will not show up in the fam3 dataframe and there will be no minimum date at which the neighbour first occupied their neighbouring midden, leading to a -Inf in the data. This code solves that issue#
			if(nrow(fam3) == 0){#
				nbor <- neighbours$axy.Date[i]#
			} else{#
				#selet the earliest date that the neighbouring squirrel lived at this reflo#
				nbor <- min(fam3$date)#
			}#
			#take the latest date of these two (this is the earliest date that these individuals lived next to each other  -- it does not take into account the possibility that the neighbouring squirrel moved from another nearby midden, but anecdotal evidence from the field suggests that anytime a neighbour moves to another nearby midden the surrounding squirrels treat that individual as a "new" neighbour)#
			f <- max(own,nbor)#
			#subtract this date from the current date to get the length of time these individuals have lived next to each other#
			f <- neighbours$axy.Date[i]-f#
			neighbours[i,"Nbor.familiarity"] <- f#
		}#
		#NOTE: Because neighbours are occassionally censused in the same month but a few days after the 'owner' this code occassionally creates negative familiarity values. For example if the owner census date is May 15, 2001 and the neighbour census date is May 17, 2001, and the first date that both squirrels are observed on neighbouring middens is May 17, 2001 this will lead to a negative familarity value of -2 (May 15, 2001 - May 17, 2001). To avoid these negative familiarity values you can change all negative values to zeros using the code below. This is a rough approximation but appropriate given that our measure of familiarity is also an approximation (i.e. familiarity is only updated twice per year).#
		#neighbours %<>% #
		#	mutate(Nbor.ten = ifelse(Nbor.ten < 0, 0, Nbor.ten))#
		#As discussed above- turn NA's into 0's since these instances represent cases where the neighboring individual was censused AFTER the axy and had no other entries in the census prior... meaning this neighbour and the axy individual's familiarity was 0 at the time#
		neighbours %<>%#
			mutate(Nbor.familiarity = ifelse(is.na(Nbor.familiarity), 0, Nbor.familiarity))#
		#Calculate averages for the neighbourhood	#
		Avg.familiarity = mean(neighbours$Nbor.familiarity, na.rm=T)#
		#Put it all together #
		axy_fam[j,"axy_avg_fam"] <- Avg.familiarity #
	} else{#
		axy_fam[j,"axy_avg_fam"] <- NA#
	}#
}#
#
clean_axy_h<-axy_fam %>% select(c(axy_yr, squirrel_id, axy_avg_fam)) %>% mutate(axy_avg_fam=ifelse(is.na(axy_avg_fam), 0, axy_avg_fam))#
#
clean_axy<-left_join(clean_axy_d, clean_axy_h,  by=c("squirrel_id"="squirrel_id", "axy_yr"="axy_yr"))
#create working dataframe#
adult_axy_all<-left_join(axy1, clean_axy, by=c("squirrel_id"="squirrel_id", "axy_yr"="axy_yr"))%>%#
  left_join((tbl(con, "flastall2") %>% select(squirrel_id, grid=gr) %>% collect()), by="squirrel_id") %>% #to bring in the grid information#
  filter(axy_ageclass=="A") %>% #
  mutate(axy_yr=axy_yr-2014)%>%#
	group_by(squirrel_id) %>% #convert these variables to among-ind effects    #
	mutate(b.axy.local.density=mean(axy.local.density),#
		b.axy_avg_fam=mean(axy_avg_fam, na.rm=T)) %>%#
	ungroup()#
summary(adult_axy_all)#
#
(adult_axy_all) %>% as_tibble() %>% dplyr::count(squirrel_id) %>% nrow() #177 adults#
(adult_axy_all) %>% as_tibble() %>% dplyr::count(squirrel_id, axy_yr, axy_month) %>% nrow() #~334 sessions#
nrow(adult_axy_all) #4507
m1a<-lmer(PC1 ~ (1|squirrel_id) + (1|axy_yr) + (1|tod), data=adult_axy_all)
sm1<-arm::sim(m1a,1000)#
smfixef=sm1@fixef#
smranef=sm1@ranef#
smfixef=coda::as.mcmc(smfixef)#
MCMCglmm::posterior.mode(smfixef)#
coda::HPDinterval(smfixef)#
#
##among-individual variance#
bID<-sm1@ranef$squirrel_id#
bvar<-as.vector(apply(bID, 1, var)) ##between individual variance posterior distribution#
bvar<-coda::as.mcmc(bvar)#
MCMCglmm::posterior.mode(bvar) ## mode of the distribution#
coda::HPDinterval(bvar)#
#
##residual variance#
rvar<-sm1@sigma^2#
rvar<-coda::as.mcmc(rvar)#
MCMCglmm::posterior.mode(rvar)#
coda::HPDinterval(rvar)#
#
##repeatability#
rID<-bvar/(bvar+rvar)#
MCMCglmm::posterior.mode(rID)#
coda::HPDinterval(rID)
m2a<-lmer(PC2 ~ (1|squirrel_id) + (1|axy_yr) + (1|tod), data=adult_axy_all)
#for axy PC2#
sm2<-arm::sim(m2a,1000)#
smfixef2=sm2@fixef#
smranef2=sm2@ranef#
smfixef2=coda::as.mcmc(smfixef2)#
MCMCglmm::posterior.mode(smfixef2)#
coda::HPDinterval(smfixef2) #
#
##among-individual variance#
bID2<-sm2@ranef$squirrel_id#
bvar2<-as.vector(apply(bID2, 1, var)) ##between individual variance posterior distribution#
bvar2<-coda::as.mcmc(bvar2)#
MCMCglmm::posterior.mode(bvar2) ## mode of the distribution#
coda::HPDinterval(bvar2)#
#
##residual variance#
rvar2<-sm2@sigma^2#
rvar2<-coda::as.mcmc(rvar2)#
MCMCglmm::posterior.mode(rvar2)#
coda::HPDinterval(rvar2)#
#
##repeatability#
rID2<-bvar2/(bvar2+rvar2)#
MCMCglmm::posterior.mode(rID2)#
coda::HPDinterval(rID2)
m1b<-lmer(PC1 ~ grid + sex + b.axy.local.density + b.axy_avg_fam + (1|squirrel_id) + (1|axy_yr) + (1|tod), data=adult_axy_all)
summary(m1b)
sm1<-arm::sim(m1b,1000)#
smfixef=sm1@fixef#
smranef=sm1@ranef#
smfixef=coda::as.mcmc(smfixef)#
MCMCglmm::posterior.mode(smfixef)#
coda::HPDinterval(smfixef)#
#
##among-individual variance#
bID<-sm1@ranef$squirrel_id#
bvar<-as.vector(apply(bID, 1, var)) ##between individual variance posterior distribution#
bvar<-coda::as.mcmc(bvar)#
MCMCglmm::posterior.mode(bvar) ## mode of the distribution#
coda::HPDinterval(bvar)#
#
##residual variance#
rvar<-sm1@sigma^2#
rvar<-coda::as.mcmc(rvar)#
MCMCglmm::posterior.mode(rvar)#
coda::HPDinterval(rvar)#
#
##repeatability#
rID<-bvar/(bvar+rvar)#
MCMCglmm::posterior.mode(rID)#
coda::HPDinterval(rID)
m2b<-lmer(PC2 ~ grid + sex + b.axy.local.density + b.axy_avg_fam + (1|squirrel_id) + (1|axy_yr) + (1|tod), data=adult_axy_all)
#for axy PC2#
sm2<-arm::sim(m2b,1000)#
smfixef2=sm2@fixef#
smranef2=sm2@ranef#
smfixef2=coda::as.mcmc(smfixef2)#
MCMCglmm::posterior.mode(smfixef2)#
coda::HPDinterval(smfixef2) #
#
##among-individual variance#
bID2<-sm2@ranef$squirrel_id#
bvar2<-as.vector(apply(bID2, 1, var)) ##between individual variance posterior distribution#
bvar2<-coda::as.mcmc(bvar2)#
MCMCglmm::posterior.mode(bvar2) ## mode of the distribution#
coda::HPDinterval(bvar2)#
#
##residual variance#
rvar2<-sm2@sigma^2#
rvar2<-coda::as.mcmc(rvar2)#
MCMCglmm::posterior.mode(rvar2)#
coda::HPDinterval(rvar2)#
#
##repeatability#
rID2<-bvar2/(bvar2+rvar2)#
MCMCglmm::posterior.mode(rID2)#
coda::HPDinterval(rID2)
#create working dataframe#
yearling_axy_all<-left_join(axy1, clean_axy, by=c("squirrel_id"="squirrel_id", "axy_yr"="axy_yr"))%>%#
  left_join((tbl(con, "flastall2") %>% select(squirrel_id, grid=gr) %>% collect()), by="squirrel_id") %>% #to bring in the grid information#
  filter(axy_ageclass=="Y") %>% #
  mutate(axy_yr=axy_yr-2014)%>%#
	group_by(squirrel_id) %>% #convert these variables to among-ind effects    #
	mutate(b.axy.local.density=mean(axy.local.density),#
		b.axy_avg_fam=mean(axy_avg_fam, na.rm=T)) %>%#
	ungroup()#
#
summary(yearling_axy_all)
m1a<-lmer(PC1 ~ (1|squirrel_id) + (1|axy_yr) + (1|tod), data=yearling_axy_all)#
summary(m1a)#
#
plot(m1a)#
hist(resid(m1a))#
#
#for axy PC1#
sm1<-arm::sim(m1a,1000)#
smfixef=sm1@fixef#
smranef=sm1@ranef#
smfixef=coda::as.mcmc(smfixef)#
MCMCglmm::posterior.mode(smfixef)#
coda::HPDinterval(smfixef)#
#
##among-individual variance#
bID<-sm1@ranef$squirrel_id#
bvar<-as.vector(apply(bID, 1, var)) ##between individual variance posterior distribution#
bvar<-coda::as.mcmc(bvar)#
MCMCglmm::posterior.mode(bvar) ## mode of the distribution#
coda::HPDinterval(bvar)#
#
##residual variance#
rvar<-sm1@sigma^2#
rvar<-coda::as.mcmc(rvar)#
MCMCglmm::posterior.mode(rvar)#
coda::HPDinterval(rvar)#
#
##repeatability#
rID<-bvar/(bvar+rvar)#
MCMCglmm::posterior.mode(rID)#
coda::HPDinterval(rID)
m1b<-lmer(PC1 ~ grid + sex + b.axy.local.density + b.axy_avg_fam + (1|squirrel_id) + (1|axy_yr) + (1|tod), data=yearling_axy_all)#
summary(m1b)#
#
plot(m1b)#
hist(resid(m1b))#
#
#for axy PC1#
sm1<-arm::sim(m1b,1000)#
smfixef=sm1@fixef#
smranef=sm1@ranef#
smfixef=coda::as.mcmc(smfixef)#
MCMCglmm::posterior.mode(smfixef)#
coda::HPDinterval(smfixef)#
#
##among-individual variance#
bID<-sm1@ranef$squirrel_id#
bvar<-as.vector(apply(bID, 1, var)) ##between individual variance posterior distribution#
bvar<-coda::as.mcmc(bvar)#
MCMCglmm::posterior.mode(bvar) ## mode of the distribution#
coda::HPDinterval(bvar)#
#
##residual variance#
rvar<-sm1@sigma^2#
rvar<-coda::as.mcmc(rvar)#
MCMCglmm::posterior.mode(rvar)#
coda::HPDinterval(rvar)#
#
##repeatability#
rID<-bvar/(bvar+rvar)#
MCMCglmm::posterior.mode(rID)#
coda::HPDinterval(rID)
##############################
######## PC2 models #########
##############################
#
##############################
#non-adjusted repeatability#
##############################
#
m2a<-lmer(PC2 ~ (1|squirrel_id) + (1|axy_yr) + (1|tod), data=yearling_axy_all)#
summary(m2a)#
#
plot(m2a)#
hist(resid(m2a))#
#
#for axy PC2#
sm2<-arm::sim(m2a,1000)#
smfixef2=sm2@fixef#
smranef2=sm2@ranef#
smfixef2=coda::as.mcmc(smfixef2)#
MCMCglmm::posterior.mode(smfixef2)#
coda::HPDinterval(smfixef2) #
#
##among-individual variance#
bID2<-sm2@ranef$squirrel_id#
bvar2<-as.vector(apply(bID2, 1, var)) ##between individual variance posterior distribution#
bvar2<-coda::as.mcmc(bvar2)#
MCMCglmm::posterior.mode(bvar2) ## mode of the distribution#
coda::HPDinterval(bvar2)#
#
##residual variance#
rvar2<-sm2@sigma^2#
rvar2<-coda::as.mcmc(rvar2)#
MCMCglmm::posterior.mode(rvar2)#
coda::HPDinterval(rvar2)#
#
##repeatability#
rID2<-bvar2/(bvar2+rvar2)#
MCMCglmm::posterior.mode(rID2)#
coda::HPDinterval(rID2)
##############################
#adjusted repeatability#
##############################
#
m2b<-lmer(PC2 ~  grid + sex + b.axy.local.density + b.axy_avg_fam + (1|squirrel_id) + (1|axy_yr) + (1|tod), data=yearling_axy_all)#
summary(m2b)#
#
plot(m2b)#
hist(resid(m2b))#
#
#for axy PC2#
sm2<-arm::sim(m2b,1000)#
smfixef2=sm2@fixef#
smranef2=sm2@ranef#
smfixef2=coda::as.mcmc(smfixef2)#
MCMCglmm::posterior.mode(smfixef2)#
coda::HPDinterval(smfixef2) #
#
##among-individual variance#
bID2<-sm2@ranef$squirrel_id#
bvar2<-as.vector(apply(bID2, 1, var)) ##between individual variance posterior distribution#
bvar2<-coda::as.mcmc(bvar2)#
MCMCglmm::posterior.mode(bvar2) ## mode of the distribution#
coda::HPDinterval(bvar2)#
#
##residual variance#
rvar2<-sm2@sigma^2#
rvar2<-coda::as.mcmc(rvar2)#
MCMCglmm::posterior.mode(rvar2)#
coda::HPDinterval(rvar2)#
#
##repeatability#
rID2<-bvar2/(bvar2+rvar2)#
MCMCglmm::posterior.mode(rID2)#
coda::HPDinterval(rID2)
