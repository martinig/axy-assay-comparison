#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Dec 12, 2023 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
#Delete previous information stored #
rm(list=ls(all=T))#
#
##set wd to the folder with all your csv's in it#
setwd("~/Documents/ECOL 530/axy-assay-comparison/data")
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Jan 4, 2024 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
options(scipen=999, dplyr.width = Inf, tibble.print_min = 50, repos='http://cran.rstudio.com/') #scipen forces outputs to not be in scientific notation #dplyr.width will show all columns for head() function and tibble.print_min sets how many rows are printed and repos sets the cran mirror#
#
#load libraries#
pacman::p_load(ggplot2, #
               dplyr, #
               lubridate, #
               tidyverse,   #
               broom,  #
               FSA,      #
               glmmTMB,  #
               lme4,   #
               tidyr,      #
               DescTools,#
               scales,#
               ggpubr,#
               grid,#
               lattice,#
               sjPlot,#
               sjlabelled,#
               sjmisc,#
               cowplot, #
               broom.mixed,#
               ggforce, #
               gridGraphics,#
               ggeffects#
)#
select<-dplyr::select#
filter<-dplyr::filter#
###############################
#  importing  data and formatting it  ##
###############################
#########################################
#raw behavioural assays#
#impossible values removed#
#########################################
#
#creating the assay datast we will be using here#
#
assays%>%filter(is.na(trialnumber))#
assays %>% filter(squirrel_id== 13305)#
#
assays<-read.csv("Trials.csv", header=T) %>%#
	bind_rows(read.csv("Personality KRSP Master File (Dec 12, 2023).csv", header=T)%>%select(-X) %>%mutate_at(vars(walk, jump, hole, hang, chew, groom, still, front, back, attack, attacklatency, approachlatency), as.numeric)) %>% #Ben's master dataset has a lot of problems, so I have to fix them below#
	group_by(sq_id, trialdate) %>%#
	#filter out duplicates (not just across datasets, for example sq_id 19729 has multiple records on the same day in Ben's data)#
	filter(row_number()==1) %>%#
	ungroup() %>%#
	group_by(sq_id) %>%#
	mutate(trialdate=ymd(trialdate)) %>%#
	arrange(trialdate) %>%#
	mutate(trialnumber=row_number())%>%#
	ungroup() %>%#
#converting the raw scores#
	mutate(#
#
	ageclass=ifelse(age==0, "J", #
			ifelse(age==1, "Y", #
			ifelse(age>1, "A",  ageclass))),#
		squirrel_id=sq_id,#
		age=as.numeric(age),#
		walk=(walk/450), #
		jump=(jump/450), #
		hole=(hole/450), #
		hang=(hang/450), #
		chew=(chew/450), #
		groom=(groom/450), #
		still=(still/450), #
		front=(front/300), #
		back=(back/300), #
		attack=(attack/300), #
		attacklatency=(attacklatency/300), #
		approachlatency=(approachlatency/300)) %>%#
	filter(!squirrel_id== 23686, #IT DOES NOT HAVE A SEX LISTED ANYWHERE!#
	!is.na(squirrel_id), !observer %in% c("SWK"), is.na(hang) |hang<=1, is.na(chew) |chew<=1, is.na(still) |still<=1, is.na(front) |front<=1, is.na(back) |back<=1, is.na(attack) |attack<=0.96, is.na(attacklatency) |attacklatency<=1, is.na(approachlatency) |approachlatency<=1) %>% #
	#attack is set to 0.96 because numerous squirrels have 288-294 attacks, which are impossible to get in 300 seconds #
	#only excludes 2 squirrels from our n=88 dataset, the first (10265) had 294 attacks and a jump rate that was an outlier AND had decimals (which is impossible for a count behaviour!) and the second (10342) had 288 attacks#
	#this leaves squirrels with <=252 attacks (which also should be investigated)#
	select(-c(sq_id, observer.software,  collar, Exclude_unless_video_reanalyzed, Exclude_reason, Proceed_with_caution, Proceed_with_caution_reason, Last_Edited, Comments, oft_duration, mis_duration, colours, midden, taglft, tagrt)) %>%#
	droplevels()#
summary(assays)#
head(assays)#
#
(assays) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #822 individuals#
nrow(assays) #1184#
#
table(assays$sex, assays$ageclass)#
table(assays$observer)#
#########################################
######  extracting summary stats  #######
#########################################
#
#total number of inds and sex stats#
other_stats<-assays%>%#
	group_by(squirrel_id)%>%#
	filter(row_number()==1)#
#
(other_stats) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #810 individuals#
table(other_stats$sex) #sex number#
#
#ageclass stats#
age_class_stats<-assays%>%#
	group_by(squirrel_id, ageclass)%>%#
	filter(row_number()==1)#
#
table(age_class_stats$ageclass) #age class number (remember: some individuals will have multiple records across age classes!)#
table(age_class_stats$ageclass, age_class_stats$sex) #
#trial number by age class stats#
adults<-assays %>% filter(ageclass=="A") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
yearl<-assays%>%filter(ageclass=="Y") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
ju<-assays%>%filter(ageclass=="J") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
#note: trial number is not reliable for adults or yearlings BECAUSE the count starts with the first trial - which may be during earlier phases (like an adult with 5 trials, could have had 3 of them done as a juvenile) - to get around this, I calculated sums after subsetting#
#
nrow(adults)#
table(adults$sum, adults$sex)#
#
nrow(yearl)#
table(yearl$sum, yearl$sex)#
#
nrow(ju)#
table(ju$sum, ju$sex)#
#
#########################################
#bare minimum needed for focal data subsets#
#########################################
#
birth<-read.csv ("fitness.csv") %>%#
	select(c(squirrel_id, sex, byear, dyear, litter_id)) %>%#
	mutate(sex=ifelse(squirrel_id %in% c(21128, 21348), "F",#
		ifelse(squirrel_id %in% c(19890, 23326, 23210), "M", as.character(sex)))) #
#
summary(birth)#
head(birth)#
#
#########################################
#raw axy data before cleaning#
#########################################
#
#for now I am just using Emily's data as I am waiting for Matt to provide me complete records#
axy<-read.csv("SquirrelAxyData_Emily.csv", header=T) %>%#
	mutate(#
	axy_id=paste(Squirrel_ID, date, tod, sep = "-"), #
	axy_date=ymd(date),#
	axy_yr=year(date),#
	axy_month=month(date)) %>%#
	select(squirrel_id= Squirrel_ID, axy_date, axy_yr, axy_month, tod, feed=Feed, forage=Forage, nestmove=NestMove, nestnotmove=NestNotMove, notmoving, travel=Travel, total, out, act, grid=Grid, treatment=Treatment, axy_id)#
#
head(axy)#
#
(axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #251 individuals#
nrow(axy) #25446#
#conserved theme across plots#
squirrel_theme <- theme_bw() +#
    theme(#legend.position = "top",#
      axis.line = element_line(colour = "black"),#
      panel.grid.major = element_blank(), #eliminates background grid#
      panel.grid.minor = element_blank(), #eliminates background grid#
      panel.border = element_blank(), #eliminates plot border#
      panel.background = element_blank(),#
      axis.title.x = element_text(size = 11), #
      axis.title.y = element_text(size = 11),#
      axis.text.x = element_text(size = 11, colour = "black"), #
      axis.text.y = element_text(size = 11, colour = "black"), #
      legend.title = element_text(size = 11, colour = "black"), #
      legend.text = element_text(size = 10, colour = "black"))#
#delete later#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) %>% select(squirrel_id)#
(matt) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #396 individuals#
#
assays_in_axy<-inner_join(assays, matt, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, trialdate) %>% filter(row_number()==1)#
(assays_in_axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #62 individuals#
nrow(assays_in_axy) #71 assays#
#
#checking the data#
assays_in_axy %>% filter(squirrel_id==13288) #2#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #2 records#
#
assays_in_axy %>% filter(squirrel_id== 11256) #12#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #3 records#
#
assays_in_axy %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #1 record#
#
write.csv(assays_in_axy, "/Users/april-martinig/Desktop/assay subset in axy data.csv")	#
#
#the axy data subset that is in the assay dataset#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) #
#
axy_in_assay<-inner_join(matt, assays, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, power_on_date) %>% filter(row_number()==1)#
(axy_in_assay) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #73 individuals#
nrow(axy_in_assay) #154 axys#
#
#checking the data#
axy_in_assay %>% filter(squirrel_id==13288) #1#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #3 records#
#
axy_in_assay %>% filter(squirrel_id== 11256) #4#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #4 records#
#
axy_in_assay %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #4 record#
#
#write.csv(axy_in_assay, "/Users/april-martinig/Desktop/axy subset in assay data.csv")
pacman::p_load(ggplot2, #
               dplyr, #
               lubridate, #
               tidyverse,   #
               broom,  #
               FSA,      #
               glmmTMB,  #
               lme4,   #
               tidyr,      #
               DescTools,#
               scales,#
               ggpubr,#
               grid,#
               lattice,#
               sjPlot,#
               sjlabelled,#
               sjmisc,#
               cowplot, #
               broom.mixed,#
               ggforce, #
               gridGraphics,#
               ggeffects#
)
install.packages("pacman", dependencies = TRUE)
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Dec 12, 2023 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
#Delete previous information stored #
rm(list=ls(all=T))#
#
##set wd to the folder with all your csv's in it#
setwd("~/Documents/ECOL 530/axy-assay-comparison/data")
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Jan 4, 2024 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
options(scipen=999, dplyr.width = Inf, tibble.print_min = 50, repos='http://cran.rstudio.com/') #scipen forces outputs to not be in scientific notation #dplyr.width will show all columns for head() function and tibble.print_min sets how many rows are printed and repos sets the cran mirror#
#
#load libraries#
pacman::p_load(ggplot2, #
               dplyr, #
               lubridate, #
               tidyverse,   #
               broom,  #
               FSA,      #
               glmmTMB,  #
               lme4,   #
               tidyr,      #
               DescTools,#
               scales,#
               ggpubr,#
               grid,#
               lattice,#
               sjPlot,#
               sjlabelled,#
               sjmisc,#
               cowplot, #
               broom.mixed,#
               ggforce, #
               gridGraphics,#
               ggeffects#
)#
select<-dplyr::select#
filter<-dplyr::filter#
###############################
#  importing  data and formatting it  ##
###############################
#########################################
#raw behavioural assays#
#impossible values removed#
#########################################
#
#creating the assay datast we will be using here#
#
assays%>%filter(is.na(trialnumber))#
assays %>% filter(squirrel_id== 13305)#
#
assays<-read.csv("Trials.csv", header=T) %>%#
	bind_rows(read.csv("Personality KRSP Master File (Dec 12, 2023).csv", header=T)%>%select(-X) %>%mutate_at(vars(walk, jump, hole, hang, chew, groom, still, front, back, attack, attacklatency, approachlatency), as.numeric)) %>% #Ben's master dataset has a lot of problems, so I have to fix them below#
	group_by(sq_id, trialdate) %>%#
	#filter out duplicates (not just across datasets, for example sq_id 19729 has multiple records on the same day in Ben's data)#
	filter(row_number()==1) %>%#
	ungroup() %>%#
	group_by(sq_id) %>%#
	mutate(trialdate=ymd(trialdate)) %>%#
	arrange(trialdate) %>%#
	mutate(trialnumber=row_number())%>%#
	ungroup() %>%#
#converting the raw scores#
	mutate(#
#
	ageclass=ifelse(age==0, "J", #
			ifelse(age==1, "Y", #
			ifelse(age>1, "A",  ageclass))),#
		squirrel_id=sq_id,#
		age=as.numeric(age),#
		walk=(walk/450), #
		jump=(jump/450), #
		hole=(hole/450), #
		hang=(hang/450), #
		chew=(chew/450), #
		groom=(groom/450), #
		still=(still/450), #
		front=(front/300), #
		back=(back/300), #
		attack=(attack/300), #
		attacklatency=(attacklatency/300), #
		approachlatency=(approachlatency/300)) %>%#
	filter(!squirrel_id== 23686, #IT DOES NOT HAVE A SEX LISTED ANYWHERE!#
	!is.na(squirrel_id), !observer %in% c("SWK"), is.na(hang) |hang<=1, is.na(chew) |chew<=1, is.na(still) |still<=1, is.na(front) |front<=1, is.na(back) |back<=1, is.na(attack) |attack<=0.96, is.na(attacklatency) |attacklatency<=1, is.na(approachlatency) |approachlatency<=1) %>% #
	#attack is set to 0.96 because numerous squirrels have 288-294 attacks, which are impossible to get in 300 seconds #
	#only excludes 2 squirrels from our n=88 dataset, the first (10265) had 294 attacks and a jump rate that was an outlier AND had decimals (which is impossible for a count behaviour!) and the second (10342) had 288 attacks#
	#this leaves squirrels with <=252 attacks (which also should be investigated)#
	select(-c(sq_id, observer.software,  collar, Exclude_unless_video_reanalyzed, Exclude_reason, Proceed_with_caution, Proceed_with_caution_reason, Last_Edited, Comments, oft_duration, mis_duration, colours, midden, taglft, tagrt)) %>%#
	droplevels()#
summary(assays)#
head(assays)#
#
(assays) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #822 individuals#
nrow(assays) #1184#
#
table(assays$sex, assays$ageclass)#
table(assays$observer)#
#########################################
######  extracting summary stats  #######
#########################################
#
#total number of inds and sex stats#
other_stats<-assays%>%#
	group_by(squirrel_id)%>%#
	filter(row_number()==1)#
#
(other_stats) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #810 individuals#
table(other_stats$sex) #sex number#
#
#ageclass stats#
age_class_stats<-assays%>%#
	group_by(squirrel_id, ageclass)%>%#
	filter(row_number()==1)#
#
table(age_class_stats$ageclass) #age class number (remember: some individuals will have multiple records across age classes!)#
table(age_class_stats$ageclass, age_class_stats$sex) #
#trial number by age class stats#
adults<-assays %>% filter(ageclass=="A") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
yearl<-assays%>%filter(ageclass=="Y") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
ju<-assays%>%filter(ageclass=="J") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
#note: trial number is not reliable for adults or yearlings BECAUSE the count starts with the first trial - which may be during earlier phases (like an adult with 5 trials, could have had 3 of them done as a juvenile) - to get around this, I calculated sums after subsetting#
#
nrow(adults)#
table(adults$sum, adults$sex)#
#
nrow(yearl)#
table(yearl$sum, yearl$sex)#
#
nrow(ju)#
table(ju$sum, ju$sex)#
#
#########################################
#bare minimum needed for focal data subsets#
#########################################
#
birth<-read.csv ("fitness.csv") %>%#
	select(c(squirrel_id, sex, byear, dyear, litter_id)) %>%#
	mutate(sex=ifelse(squirrel_id %in% c(21128, 21348), "F",#
		ifelse(squirrel_id %in% c(19890, 23326, 23210), "M", as.character(sex)))) #
#
summary(birth)#
head(birth)#
#
#########################################
#raw axy data before cleaning#
#########################################
#
#for now I am just using Emily's data as I am waiting for Matt to provide me complete records#
axy<-read.csv("SquirrelAxyData_Emily.csv", header=T) %>%#
	mutate(#
	axy_id=paste(Squirrel_ID, date, tod, sep = "-"), #
	axy_date=ymd(date),#
	axy_yr=year(date),#
	axy_month=month(date)) %>%#
	select(squirrel_id= Squirrel_ID, axy_date, axy_yr, axy_month, tod, feed=Feed, forage=Forage, nestmove=NestMove, nestnotmove=NestNotMove, notmoving, travel=Travel, total, out, act, grid=Grid, treatment=Treatment, axy_id)#
#
head(axy)#
#
(axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #251 individuals#
nrow(axy) #25446#
#conserved theme across plots#
squirrel_theme <- theme_bw() +#
    theme(#legend.position = "top",#
      axis.line = element_line(colour = "black"),#
      panel.grid.major = element_blank(), #eliminates background grid#
      panel.grid.minor = element_blank(), #eliminates background grid#
      panel.border = element_blank(), #eliminates plot border#
      panel.background = element_blank(),#
      axis.title.x = element_text(size = 11), #
      axis.title.y = element_text(size = 11),#
      axis.text.x = element_text(size = 11, colour = "black"), #
      axis.text.y = element_text(size = 11, colour = "black"), #
      legend.title = element_text(size = 11, colour = "black"), #
      legend.text = element_text(size = 10, colour = "black"))#
#delete later#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) %>% select(squirrel_id)#
(matt) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #396 individuals#
#
assays_in_axy<-inner_join(assays, matt, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, trialdate) %>% filter(row_number()==1)#
(assays_in_axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #62 individuals#
nrow(assays_in_axy) #71 assays#
#
#checking the data#
assays_in_axy %>% filter(squirrel_id==13288) #2#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #2 records#
#
assays_in_axy %>% filter(squirrel_id== 11256) #12#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #3 records#
#
assays_in_axy %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #1 record#
#
write.csv(assays_in_axy, "/Users/april-martinig/Desktop/assay subset in axy data.csv")	#
#
#the axy data subset that is in the assay dataset#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) #
#
axy_in_assay<-inner_join(matt, assays, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, power_on_date) %>% filter(row_number()==1)#
(axy_in_assay) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #73 individuals#
nrow(axy_in_assay) #154 axys#
#
#checking the data#
axy_in_assay %>% filter(squirrel_id==13288) #1#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #3 records#
#
axy_in_assay %>% filter(squirrel_id== 11256) #4#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #4 records#
#
axy_in_assay %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #4 record#
#
#write.csv(axy_in_assay, "/Users/april-martinig/Desktop/axy subset in assay data.csv")
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 21599)) %>%#
  arrange(squirrel_id) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
  timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
  start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2), #
  sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE)))#
  ) %>%#
  unnest(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 21599)) %>%#
  arrange(squirrel_id) %>%#
  group_by(squirrel_id) %>%#
  mutate(
timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"),
start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2),
sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE)))
mutate(#
  timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
  start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2), #
  sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE)))#
  ) %>%
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 21599)) %>%#
  arrange(squirrel_id) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
  timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
  start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2), #
  sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE))))#
  ) %>%#
  unnest(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 21599)) %>%#
  arrange(squirrel_id) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
  timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
  start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2), #
  sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE)))#
  ) %>%#
  unnest(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 21599)) %>%#
  arrange(squirrel_id) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
  timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
  start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
  end_time = start_time + minutes(2), #
  sampled_data = list(filter(timestamp, between(timestamp, start_time, end_time, incbounds = FALSE)))#
  ) %>%#
  unnest(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
`rlang::last_trace()`
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) )
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) )#
#
axy_test
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) ) %>%#
  unnest(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
axy_test
unnest(sampled_data)# %>%
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) ) %>%#
  unnest(sampled_data)
axy_test
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) ) %>%#
  ungroup(sampled_data)
axy_test
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) ) %>%#
  ungroup(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
axy_test
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), sampled_data = list(timestamp[between(timestamp, start_time, end_time, incbounds = FALSE)]) ) %>%
axy_test <- axy %>% filter(squirrel_id %in% c(12678, 21599)) %>% arrange(squirrel_id) %>% group_by(squirrel_id) %>% mutate( timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), end_time = start_time + minutes(2), ) %>%#
  ungroup(sampled_data) %>%#
  filter(minute(timestamp) %% 2 == 0)#
axy_test
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Dec 12, 2023 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
#Delete previous information stored #
rm(list=ls(all=T))#
#
##set wd to the folder with all your csv's in it#
setwd("~/Documents/ECOL 530/axy-assay-comparison/data")
#this is the first R script that always needs to be run#
#all the data cleaning is here #
#if a mistake is found message April before making changes#
#Last edited on Jan 4, 2024 by A. R. Martinig #
#
#axy-assay analysis for Jonas#
#
options(scipen=999, dplyr.width = Inf, tibble.print_min = 50, repos='http://cran.rstudio.com/') #scipen forces outputs to not be in scientific notation #dplyr.width will show all columns for head() function and tibble.print_min sets how many rows are printed and repos sets the cran mirror#
#
#load libraries#
pacman::p_load(ggplot2, #
               dplyr, #
               lubridate, #
               tidyverse,   #
               broom,  #
               FSA,      #
               glmmTMB,  #
               lme4,   #
               tidyr,      #
               DescTools,#
               scales,#
               ggpubr,#
               grid,#
               lattice,#
               sjPlot,#
               sjlabelled,#
               sjmisc,#
               cowplot, #
               broom.mixed,#
               ggforce, #
               gridGraphics,#
               ggeffects#
)#
select<-dplyr::select#
filter<-dplyr::filter#
###############################
#  importing  data and formatting it  ##
###############################
#########################################
#raw behavioural assays#
#impossible values removed#
#########################################
#
#creating the assay datast we will be using here#
#
assays%>%filter(is.na(trialnumber))#
assays %>% filter(squirrel_id== 13305)#
#
assays<-read.csv("Trials.csv", header=T) %>%#
	bind_rows(read.csv("Personality KRSP Master File (Dec 12, 2023).csv", header=T)%>%select(-X) %>%mutate_at(vars(walk, jump, hole, hang, chew, groom, still, front, back, attack, attacklatency, approachlatency), as.numeric)) %>% #Ben's master dataset has a lot of problems, so I have to fix them below#
	group_by(sq_id, trialdate) %>%#
	#filter out duplicates (not just across datasets, for example sq_id 19729 has multiple records on the same day in Ben's data)#
	filter(row_number()==1) %>%#
	ungroup() %>%#
	group_by(sq_id) %>%#
	mutate(trialdate=ymd(trialdate)) %>%#
	arrange(trialdate) %>%#
	mutate(trialnumber=row_number())%>%#
	ungroup() %>%#
#converting the raw scores#
	mutate(#
#
	ageclass=ifelse(age==0, "J", #
			ifelse(age==1, "Y", #
			ifelse(age>1, "A",  ageclass))),#
		squirrel_id=sq_id,#
		age=as.numeric(age),#
		walk=(walk/450), #
		jump=(jump/450), #
		hole=(hole/450), #
		hang=(hang/450), #
		chew=(chew/450), #
		groom=(groom/450), #
		still=(still/450), #
		front=(front/300), #
		back=(back/300), #
		attack=(attack/300), #
		attacklatency=(attacklatency/300), #
		approachlatency=(approachlatency/300)) %>%#
	filter(!squirrel_id== 23686, #IT DOES NOT HAVE A SEX LISTED ANYWHERE!#
	!is.na(squirrel_id), !observer %in% c("SWK"), is.na(hang) |hang<=1, is.na(chew) |chew<=1, is.na(still) |still<=1, is.na(front) |front<=1, is.na(back) |back<=1, is.na(attack) |attack<=0.96, is.na(attacklatency) |attacklatency<=1, is.na(approachlatency) |approachlatency<=1) %>% #
	#attack is set to 0.96 because numerous squirrels have 288-294 attacks, which are impossible to get in 300 seconds #
	#only excludes 2 squirrels from our n=88 dataset, the first (10265) had 294 attacks and a jump rate that was an outlier AND had decimals (which is impossible for a count behaviour!) and the second (10342) had 288 attacks#
	#this leaves squirrels with <=252 attacks (which also should be investigated)#
	select(-c(sq_id, observer.software,  collar, Exclude_unless_video_reanalyzed, Exclude_reason, Proceed_with_caution, Proceed_with_caution_reason, Last_Edited, Comments, oft_duration, mis_duration, colours, midden, taglft, tagrt)) %>%#
	droplevels()#
summary(assays)#
head(assays)#
#
(assays) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #822 individuals#
nrow(assays) #1184#
#
table(assays$sex, assays$ageclass)#
table(assays$observer)#
#########################################
######  extracting summary stats  #######
#########################################
#
#total number of inds and sex stats#
other_stats<-assays%>%#
	group_by(squirrel_id)%>%#
	filter(row_number()==1)#
#
(other_stats) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #810 individuals#
table(other_stats$sex) #sex number#
#
#ageclass stats#
age_class_stats<-assays%>%#
	group_by(squirrel_id, ageclass)%>%#
	filter(row_number()==1)#
#
table(age_class_stats$ageclass) #age class number (remember: some individuals will have multiple records across age classes!)#
table(age_class_stats$ageclass, age_class_stats$sex) #
#trial number by age class stats#
adults<-assays %>% filter(ageclass=="A") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
yearl<-assays%>%filter(ageclass=="Y") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
ju<-assays%>%filter(ageclass=="J") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
#note: trial number is not reliable for adults or yearlings BECAUSE the count starts with the first trial - which may be during earlier phases (like an adult with 5 trials, could have had 3 of them done as a juvenile) - to get around this, I calculated sums after subsetting#
#
nrow(adults)#
table(adults$sum, adults$sex)#
#
nrow(yearl)#
table(yearl$sum, yearl$sex)#
#
nrow(ju)#
table(ju$sum, ju$sex)#
#
#########################################
#bare minimum needed for focal data subsets#
#########################################
#
birth<-read.csv ("fitness.csv") %>%#
	select(c(squirrel_id, sex, byear, dyear, litter_id)) %>%#
	mutate(sex=ifelse(squirrel_id %in% c(21128, 21348), "F",#
		ifelse(squirrel_id %in% c(19890, 23326, 23210), "M", as.character(sex)))) #
#
summary(birth)#
head(birth)#
#
#########################################
#raw axy data before cleaning#
#########################################
#
#for now I am just using Emily's data as I am waiting for Matt to provide me complete records#
axy<-read.csv("SquirrelAxyData_Emily.csv", header=T) %>%#
	mutate(#
	axy_id=paste(Squirrel_ID, date, tod, sep = "-"), #
	axy_date=ymd(date),#
	axy_yr=year(date),#
	axy_month=month(date)) %>%#
	select(squirrel_id= Squirrel_ID, axy_date, axy_yr, axy_month, tod, feed=Feed, forage=Forage, nestmove=NestMove, nestnotmove=NestNotMove, notmoving, travel=Travel, total, out, act, grid=Grid, treatment=Treatment, axy_id)#
#
head(axy)#
#
(axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #251 individuals#
nrow(axy) #25446#
#conserved theme across plots#
squirrel_theme <- theme_bw() +#
    theme(#legend.position = "top",#
      axis.line = element_line(colour = "black"),#
      panel.grid.major = element_blank(), #eliminates background grid#
      panel.grid.minor = element_blank(), #eliminates background grid#
      panel.border = element_blank(), #eliminates plot border#
      panel.background = element_blank(),#
      axis.title.x = element_text(size = 11), #
      axis.title.y = element_text(size = 11),#
      axis.text.x = element_text(size = 11, colour = "black"), #
      axis.text.y = element_text(size = 11, colour = "black"), #
      legend.title = element_text(size = 11, colour = "black"), #
      legend.text = element_text(size = 10, colour = "black"))#
#delete later#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) %>% select(squirrel_id)#
(matt) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #396 individuals#
#
assays_in_axy<-inner_join(assays, matt, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, trialdate) %>% filter(row_number()==1)#
(assays_in_axy) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #62 individuals#
nrow(assays_in_axy) #71 assays#
#
#checking the data#
assays_in_axy %>% filter(squirrel_id==13288) #2#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #2 records#
#
assays_in_axy %>% filter(squirrel_id== 11256) #12#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #3 records#
#
assays_in_axy %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #1 record#
#
write.csv(assays_in_axy, "/Users/april-martinig/Desktop/assay subset in axy data.csv")	#
#
#the axy data subset that is in the assay dataset#
#
matt<-read.csv("AxyDatabase Matt.csv", header=T) #
#
axy_in_assay<-inner_join(matt, assays, by=c("squirrel_id"="squirrel_id")) %>% group_by(squirrel_id, power_on_date) %>% filter(row_number()==1)#
(axy_in_assay) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #73 individuals#
nrow(axy_in_assay) #154 axys#
#
#checking the data#
axy_in_assay %>% filter(squirrel_id==13288) #1#
matt %>% filter(squirrel_id==13288) #1 record#
assays %>% filter(squirrel_id==13288) #3 records#
#
axy_in_assay %>% filter(squirrel_id== 11256) #4#
matt %>% filter(squirrel_id== 11256) #4 records#
assays %>% filter(squirrel_id== 11256) #4 records#
#
axy_in_assay %>% filter(squirrel_id== 13305) #4 records#
matt %>% filter(squirrel_id== 13305) #4 records#
assays %>% filter(squirrel_id== 13305) #4 record#
#
#write.csv(axy_in_assay, "/Users/april-martinig/Desktop/axy subset in assay data.csv")
#axy data for the complete dataset#
#last edited Nov 10, 2023 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
#
#########################################
#complete axy dataset, n=250 inds#
#before merging with personality data#
#########################################
#
axy1<- dplyr::inner_join(axy, birth, by=c("squirrel_id")) %>%#
	group_by(axy_id, squirrel_id) %>%#
  	mutate(#
  		axy_age = axy_yr-byear, #calc age#
  		axy_ageclass = ifelse(axy_age==1, "Y", #
  			ifelse(axy_age >1, "A",#
        	ifelse(axy_age < 1, "J", "")))) %>% #creating age class  #
     ungroup() %>%   	      	#
     ##group by squirrel id (all axy are one behavioral trial per individual)#
    #group_by(squirrel_id) %>%#
    #mutate(total_obs=sum(total), #
         #get the totals for each behaviour#
         #overall_total_feeding=sum(feed),#
         #overall_total_foraging=sum(forage),#
         #overall_total_nestmoveing=sum(nestmove),#
         #overall_total_nestnotmoving=sum(nestnotmove),#
         #overall_total_notmoving =sum(notmoving),#
         #overall_total_travel=sum(travel),#
         #calc the proportions#
         #overall_prop_feeding=(overall_total_feeding/total_obs),#
         #overall_prop_foraging=(overall_total_foraging/total_obs),#
         #overall_prop_nestmoveing =(overall_total_nestmoveing/total_obs),#
         #overall_prop_nestnotmoving =(overall_total_nestnotmoving/total_obs),#
         #overall_prop_notmoving =(overall_total_notmoving/total_obs),#
         #overall_prop_travel=(overall_total_travel/total_obs)) %>%#
	#ungroup() %>%#
##group by squirrel id and axy id (treats each axy as behavior trial) #
	group_by(squirrel_id, axy_id) %>%#
    mutate(total_obs=sum(total), #
         #get the totals for each behaviour#
         total_feeding=sum(feed),#
         total_foraging=sum(forage),#
         total_nestmoveing=sum(nestmove),#
         total_nestnotmoving=sum(nestnotmove),#
         total_notmoving =sum(notmoving),#
         total_travel=sum(travel),#
         #calc the proportions#
         prop_feeding=(total_feeding/total_obs),#
         prop_foraging=(total_foraging/total_obs),#
         prop_nestmoveing =(total_nestmoveing/total_obs),#
         prop_nestnotmoving =(total_nestnotmoving/total_obs),#
         prop_notmoving =(total_notmoving/total_obs),#
         prop_travel=(total_travel/total_obs)) %>%#
	filter(row_number()==1) %>%  #selects first row!#
  ungroup() %>%#
  droplevels() %>%#
  select(-c(total_obs, total_feeding, total_foraging, total_nestmoveing, total_nestnotmoving, total_notmoving, total_travel, out, act))#
#
summary(axy1) #
head(axy1)#
#
table(axy1$sex)#
#########################################
######  extracting summary stats  #######
#########################################
#
(axy1) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #250 individuals#
nrow(axy1) #25199#
#
#deployment dates needed to calculate the exact number of sessions#
(axy1) %>% as_tibble() %>% count(squirrel_id, axy_yr, axy_month) %>% nrow() #approximately 557 sessions #
#
#year range#
table(axy1$axy_yr)#
#
#sex stats#
stats3<-axy1%>%group_by(squirrel_id)%>%filter(row_number()==1)#
table(stats3$sex)#
#
#ageclass stats#
stats4<-axy1%>%group_by(squirrel_id, axy_ageclass)%>%filter(row_number()==1)#
table(stats4$axy_ageclass)#
table(stats4$axy_ageclass, stats4$sex) #
#
#ageclass stats#
stats5<-axy1%>%group_by(squirrel_id, axy_ageclass)#
table(stats5$axy_ageclass) #
#
#observers#
#obs<-axy1%>%group_by(axy_id)%>%filter(row_number()==1) %>% group_by(f_observer) %>% mutate(sum=n())#
#table(obs$f_observer)#
#summary(obs$sum)#
#
#trial number by age class stats#
ads<-axy1 %>% filter(axy_ageclass =="A") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
yrs<-axy1 %>% filter(axy_ageclass =="Y") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
juvs<-axy1 %>% filter(axy_ageclass =="J") %>% group_by(squirrel_id) %>% mutate(sum=n()) %>% filter(row_number()==1)#
#
#note: trial number is not reliable for adults or yearlings BECAUSE the count starts with the first trial - which may be during earlier phases (like an adult with 5 trials, could have had 3 of them done as a juvenile) - to get around this, I calculated sums after subsetting#
#
nrow(ads)#
table(ads$sum, ads$sex)#
#
nrow(yrs)#
table(yrs$sum, yrs$sex)#
#
nrow(juvs)#
table(juvs$sum, juvs$sex)#
#########################################
# merged axy and personality dataset#
# n=60#
#########################################
#
axy2<- dplyr::inner_join(assays, axy1, by=c("squirrel_id", "sex")) %>%#
  group_by(axy_id)%>%#
  filter(row_number()==1) %>%#
  droplevels()%>%#
  select(-c(videodate, trialtime)) %>%#
  ungroup()#
#
#########################################
######  extracting summary stats  #######
#########################################
#
(axy2) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #60 individuals#
nrow(axy2)#
#
table(axy2$axy_yr)#
#
stats5<-axy2%>%group_by(squirrel_id)%>%filter(row_number()==1)#
table(stats5$sex)#
#
#assay ageclass#
stats6a<-axy2%>%group_by(squirrel_id, ageclass)%>%filter(row_number()==1)#
table(stats6a$ageclass)#
#
#axy ageclass#
stats6b<-axy2%>%group_by(squirrel_id, axy_ageclass)%>%filter(row_number()==1)#
table(stats6b$axy_ageclass)#
#########################################
# merged axy and personality dataset#
# filtered for matching ageclass, n=46#
#########################################
#
#run filtered by ageclass#
axy_ageclass <- dplyr::inner_join(assays, axy1, by=c("ageclass"="axy_ageclass", "squirrel_id"="squirrel_id", "sex"="sex")) %>%#
  droplevels()%>%#
  group_by(axy_id)%>%#
  filter(row_number()==1) %>%#
  select(-c(videodate, trialtime)) %>%#
  ungroup()#
#
#########################################
######  extracting summary stats  #######
#########################################
#
(axy_ageclass) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #46 individuals#
nrow(axy_ageclass)#
#
table(axy_ageclass $axy_yr)#
#
stats7<-axy_ageclass%>%group_by(squirrel_id)%>%filter(row_number()==1)#
table(stats7$sex)#
#
stats8<-axy_ageclass%>%group_by(squirrel_id, ageclass)%>%filter(row_number()==1)#
table(stats8$ageclass) #assay ageclass = axy ageclass#
#########################################
# merged axy and personality dataset#
# filtered for matching AGE, n=10#
#########################################
#
#Run filtered by age #
axy_age <- dplyr::inner_join(assays, axy1, by=c("ageclass"="axy_ageclass", "age"="axy_age", "squirrel_id"="squirrel_id", "sex"="sex")) %>%#
  droplevels()%>%#
  group_by(axy_id)%>%#
  filter(row_number()==1) %>%#
  select(-c(videodate, trialtime)) %>%#
  ungroup()#
#########################################
######  extracting summary stats  #######
#########################################
#
(axy_age) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #10 individuals#
nrow(axy_age)#
#
table(axy_age $axy_yr)#
#
stats9<-axy_age%>%group_by(squirrel_id)%>%filter(row_number()==1)#
table(stats9$sex)#
#
stats10<-axy_age%>%group_by(squirrel_id, ageclass)%>%filter(row_number()==1)#
table(stats10$ageclass) #assay ageclass = axy ageclass
#PCA calculcations for axy behaviours #
#last updated Oct 20, 2023 by A. R. Martinig#
#
#run the following prior to running script:#
start-up code.R#
axy data subsets.R#
#########################################
#complete axy dataset, n=250 inds#
#before merging with personality data#
#########################################
#
colnames(axy1)#
#
PCaxys1<-prcomp(axy1[c("prop_feeding", "prop_foraging", "prop_nestmoveing", "prop_nestnotmoving", "prop_notmoving", "prop_travel")], center=TRUE, scale. =TRUE)#
summary(PCaxys1) #
PCaxys1#
##PC1: feeding, foraging, -nestnotmoving, travel#
##PC2: nestnotmoving, -notmoving#
##PC3: nestmoveing, notmoving#
#
#add PCs to dataset#
axy1$PC1<-prcomp(~prop_feeding + prop_foraging + prop_nestmoveing + prop_nestnotmoving +  prop_notmoving + prop_travel, data= axy1, center=TRUE, scale =TRUE)$x[,1]#
axy1$PC2<-(-1)*prcomp(~prop_feeding + prop_foraging + prop_nestmoveing + prop_nestnotmoving +  prop_notmoving + prop_travel, data= axy1, center=TRUE, scale =TRUE)$x[,2]#
####testing ageclass issues#
#test_axys<-axys1%>%group_by(squirrel_id)%>%filter(row_number()==1)#
#test_raxys<-r_axys1%>%group_by(squirrel_id)%>%filter(row_number()==1)#
#test_adults327<-adult_axys327%>%group_by(squirrel_id)%>%filter(row_number()==1)#
#
#check ageclass summaries#
#table(test_axys$axy_ageclass) #212 A, 4 J, 111 Y#
#table(test_raxys$axy_ageclass) #195 A, 4 J, 128 Y (loss of 17A/gain 17Y)#
#table(test_adults327$axy_ageclass) #219 A (gained 7)#
#
#where are the extra individuals coming from?#
#axys1%>%filter(squirrel_id==19583) #36 records, 6 when sq is A#
#r_axys1%>%filter(squirrel_id==19583) #36 records, 6 when sq is A#
#adult_axys327%>%filter(squirrel_id==19583) #6 records total#
#
#test_axys%>%filter(squirrel_id==19583) #1 record, sq is Y#
#test_raxys%>%filter(squirrel_id==19583) #1 record, sq is Y, different trialdate than in axys(b/c of ordering by date)#
#test_adults327%>%filter(squirrel_id==19583) #1 record, sq now shows up as adult & different trialdate#
#
#suggested that this squirrel (and the others listed) get ignored when we use the filter(row_number()==1) code bc the adult records are NOT the first row (at least in the r_axys1 file)#
#but overall the actual nrow() counts are consistent between r_axys1 and axys1#
#and actual records of A squirrels are consistent across the three datasets
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result#
#
#now that the FAKE data is in a format that is similar to what the axy data will actually be in, we can begin to try to sample the data accordingly#
#
#STEP ONE:#
#keep records for every 30 seconds#
#
keep_30<-result%>%#
	group_by(squirrel_id) %>%#
  	slice(seq(1, n(), by = 30)) %>%#
  	arrange(squirrel_id, timestamp)#
#
keep_30#
#
#next steps#
#
#STEP TWO:#
#how to have it sample a set amount of time (e.g., 7 minutes of the whole day) - here it could be 1 minute of the "whole (2 minute)" day = continous/consecutive time #
#
#STEP THREE:#
#have it sample a random set amount of time (e.g., 7 minutes randomly spread out across the whole day) - here it could be 1 minute of the "whole (2 minute)" day = noncontinous/nonconsecutive time
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
keep_all <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 59)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
<<<<<<< Updated upstream
clean_axy<-left_join(clean_axy_d, clean_axy_h,  by=c("squirrel_id"="squirrel_id", "axy_yr"="axy_yr"))
library(MCMCglmm)#
library(data.table)#
#
merged_assays<-personality_all %>% ungroup() %>% mutate(trialdate=ymd(trialdate)) %>% left_join(clean_assay, by=c("squirrel_id"="squirrel_id", "year"="year")) %>% select(squirrel_id, grid, sex, ageclass, age, cohort, year, trialnumber, trialdate, assay.local.density, assay_avg_fam, OFT1, OFT2) #
#
merged_axys<-axy1 %>% ungroup() %>% left_join(clean_axy, by=c("squirrel_id"="squirrel_id", "axy_yr"="axy_yr")) %>% select(squirrel_id, grid, sex, axy_ageclass, axy_age, byear, axy_yr, axy_id, axy_date, axy.local.density, axy_avg_fam, PC1, PC2) #
#
L <- lapply(list(merged_assays, merged_axys), reshape2::melt, id.vars = 1:10)#
#
DT <- data.table::rbindlist(L, use.names = FALSE, fill = FALSE)#
#
merged<-data.table::dcast(DT, ... ~ variable, value.var = "value")#
merged		 #
#
summary(merged) #
head(merged)#
#
(merged) %>% as_tibble() %>% count(squirrel_id) %>% nrow() #1000 individuals#
final_MCMC<-merged%>% #
  	mutate(date=yday(trialdate), #converts dates to days since Jan 1st!#
         age2=age^2,#
         local.density=assay.local.density,#
         avg_fam =assay_avg_fam) %>% #make a quadratic age variable#
  mutate(year=year-2005) %>% #
   group_by(cohort, grid)%>%#
   #a lot of fancy code to deal with existing NAs (don't want to replace), new NAs that come up because of the way standardization works, and other ridiculous coding issues with the dataset#
         mutate(age =  if(n() == 1) 0 * age#
  			else (age-mean(age, na.rm=T))/(1*(sd(age, na.rm=T))), #
  			age = replace(age, is.nan(age), 0),#
  		age2 =  if(n() == 1) 0 * age2#
  			else (age2-mean(age2, na.rm=T))/(1*(sd(age2, na.rm=T))), #
  			age2 = replace(age2, is.nan(age2), 0),#
       	local.density = if(n() == 1 && !is.na(local.density) | sum(!is.na(local.density)) == 1) 0 * local.density#
  			else ((local.density-mean(local.density, na.rm=T))/(1*(sd(local.density, na.rm=T)))), #
  			local.density = replace(local.density, is.nan(local.density), 0),#
  		avg_fam = if(n() == 1 && !is.na(avg_fam) | sum(!is.na(avg_fam)) == 1) 0 * avg_fam#
  			else ((avg_fam-mean(avg_fam, na.rm=T))/(1*(sd(avg_fam, na.rm=T)))), #
  			avg_fam = replace(avg_fam, is.nan(avg_fam), 0),#
  		date = if(n() == 1 && !is.na(date) | sum(!is.na(date)) == 1) 0 * date#
  			else ((date-mean(date, na.rm=T))/(1*(sd(date, na.rm=T)))), #
  			date = replace(date, is.nan(date), 0)) %>%#
    	ungroup() %>%#
    	filter(!squirrel_id==100071) %>% #remove this proble squirrel because we are missing so much data for it!#
    	filter(!is.na(avg_fam)) #we have a lot of NAs for this - remove for now and APRIL needs to investigate (Jan 16, 2024)#
#
final_MCMC %>% filter(is.na(age))              #
#make sure to always check for new NAs after standardization because it doesnt work when a squirrel is the only individual in their grid and year; give mean values (0) to these records#
#
summary(final_MCMC)#
head(final_MCMC)#
names(final_MCMC)#
#
write.csv(final_MCMC, "/Users/april-martinig/Desktop/final_dataset.csv")#
#
#make sure variables aren't standardized before running this#
attach(final_MCMC);tt=cbind(year, age, age2, local.density, avg_fam, date)#
cor(tt)  #
#axy_yr & assay_yr = 0.77#
  #going with assay_yr instead of axy_yr because:#
  #theres overlap btw the two but assay_yr spans larger range & #
  #theres overlap between assays and axys#
#assay_age & assay_age2 = 0.9290#
#axy_age & axy_age2 = 0.964#
#assay_avg_fam & assay_age2 = 0.684#
#assay_avg_fam & assay_age = 0.740#
#next highest correlation was 0.517	#
#bayesian multivariate generalized linear model analysis #
#
###you will have to model priors. Good to test for different prior settings to ensure results are not sensitive to prior.#
#R is residual structure, G is random effects structure, B is fixed effects#
#numbers inside diag() indicate the number of response variables in my model#
#number of zeros in alpha.mu=c() need to match the number of response variables in model#
#
#this is a parameter expanded prior#
prior.iw<-list(#
	R=list(V=diag(4), nu=1), #
	G=list(#
		G1=list(V=diag(4), nu= 1, 	#
			alpha.mu=c(0,0,0,0), #
			alpha.V=diag(4)*1000), #when alpha.V is non-zero, parameter expanded algorithms are used #for this the last number should be something large (e.g. 1000, depending on the scale of the data)#
#
#need to repeat to deal with second random effect#
		G2=list(V=diag(4), nu= 1, 	#
			alpha.mu=c(0,0,0,0), #
			alpha.V=diag(4)*1000)))#
#the use of parameter expansion means the priors are no longer inverse-Wishart but scaled-F#
#parameter expanded models can be used, which enable prior specifications from the scaled non-central F-distribution								#
final_MCMC<-as.data.frame(final_MCMC)#
#
#write.csv(final_MCMC, "/Users/april-martinig/Desktop/final_MCMC.csv")#
#
###model structure...double check that variables are written correctly (e.g., capitalization, underscoring, etc.)#
mod.1 <- MCMCglmm(#
	cbind(OFT1, OFT2, PC1, PC2) ~ #
	trait-1 +#
	trait:sex +#
	trait:age +#
	trait:age2 +#
	trait:date +#
	trait:local.density +#
	trait:avg_fam,#
	random = ~us(trait):squirrel_id + us(trait):year,#
	rcov = ~idh(trait):units, #"us" allows for trait to have different residuals #to force residuals cov to be zero just replace "us" with "idh" ---> you might have to change your prior?! #you use rcov = 0 because you know this is so, but if you allow the model to run as is, you can see if this does meet the expectation that it would be zero#
	family = c("gaussian", "gaussian", "gaussian", "gaussian"), #state response variables distributions (start with Gaussian priors for all parameters, including categorical. This just means that your uncertainty around the initial guess is governed by a normal distribution with a specific variance (indicating the degree of belief))#
	data= final_MCMC, #
	prior = prior.iw, #
	verbose = FALSE,#
	pr=TRUE, #this saves the BLUPs #
	nitt=303000, #number of iterations#
	thin=300, #interval at which the Markov chain is stored#
	burnin=3000) #number of iterations before samples are stored#
#
summary(mod.1)
# Posterior distribution of location effects#
round(apply(mod.1$Sol,2,mean),3)#
round(apply(mod.1$Sol,2, quantile, c(0.025, 0.975)),3)#
#
round(apply(mod.1$VCV,2,mean),3)#
round(apply(mod.1$VCV,2, quantile, c(0.025, 0.975)),3)#
#4 RESPONSE VARS#
#
###posterior correlation matrix - 1 through 16 is among individual, 17-32 is within-individual#
c1 <- posterior.cor(mod.1$VCV[,1:16])#
round(apply(c1,2,mean),3)#
round(apply(c1,2, quantile, c(0.025, 0.975)),3)#
#
c2 <- posterior.cor(mod.1$VCV[,17:32])#
round(apply(c2,2,mean),3)#
round(apply(c2,2, quantile, c(0.025, 0.975)),3)#
#
#get the posterior mode values instead of posterior mean for the MCMC output for the random effects#
posterior.mode(mod.1$VCV[,1:16]) #squirrel id#
HPDinterval(mod.1$VCV[,1:16])#
#
posterior.mode(mod.1$VCV[,17:32]) #year#
HPDinterval(mod.1$VCV[,17:32])  #
#
posterior.mode(mod.1$VCV[,33:36]) #residuals#
HPDinterval(mod.1$VCV[,33:36])  #use 33:48 when rcov=~us(trait):units
=======
# Print the result#
result
keep_all <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  start_indices <- sample(1:(n-59), 1)#
  selected_indices <- start_indices:(start_indices + 59)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)
keep_all <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  start_indices <- sample(1:(n-59), 1)#
  selected_indices <- start_indices:(start_indices + 59)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
keep_all <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  start_indices <- sample(1:(n-59), 1)#
  selected_indices <- start_indices:(start_indices + 59)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, keep_all(.SD), by = squirrel_id]#
#
# Print the result#
result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id]#
#
# Print the result#
result
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] %>%#
	mutate(arrange(desc(timestamp)))#
#
# Print the result#
result
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] %>%#
	mutate(arrange(desc(timestamp)))#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] %>%#
ordered_result <- result[order(result)]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
ordered_result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
ordered_result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
ordered_result
#Andrea's Comment#
#Last edited Jan 2, 2023 by J. I. Sanders#
#
# Load packages#
library(purrr)#
library(data.table)#
#
# Create a fake dataset to test the program with#
axy_test <- axy %>%#
  filter(squirrel_id %in% c(12678, 19890, 21599)) %>%#
  arrange(squirrel_id, axy_date) %>%#
  group_by(squirrel_id) %>%#
  mutate(#
    timestamp = format(seq(as.POSIXct("12:00:00", format = "%H:%M:%S"), by = "1 sec", length.out = n()), format = "%H:%M:%S"), #
    start_time = as.POSIXct(sample(timestamp, 1), format = "%H:%M:%S"), #
    end_time = start_time + minutes(2)) %>%#
  select(-c(start_time, end_time))#
#
head(axy_test)#
#creating a function to generate the data in a way that is usable for us to then test the sampling code on#
#
# Create a data.table for efficient grouping#
dt <- as.data.table(axy_test)#
#
# Define function to randomly generate consecutive samples#
generate_sample <- function(x) {#
  n <- nrow(x)#
  if (n < 120) return(NULL)#
#
  start_indices <- sample(1:(n-119), 1)#
  selected_indices <- start_indices:(start_indices + 119)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the function to each squirrel#
result <- dt[, generate_sample(.SD), by = squirrel_id]#
#
# Print the result#
result
# Define a function to randomly generate one-minute samples with random seconds#
random_set <- function(x) {#
  n <- nrow(x)#
  if (n < 60) return(NULL)#
#
  selected_indices <- sample(1:n, 60, replace = FALSE)#
  return(x[selected_indices, , drop = FALSE])#
}#
#
# Apply the new function to each squirrel#
result <- dt[, random_set(.SD), by = squirrel_id] #
ordered_result <- result[order(result)]#
#
# Print the result#
ordered_result
>>>>>>> Stashed changes
